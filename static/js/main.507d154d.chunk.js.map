{"version":3,"sources":["App.module.css","components/assets/InputValuta.tsx","components/RublesInput.tsx","components/assets/SelectCurrency.tsx","components/ResultInput.tsx","components/Summa.tsx","dal/conversionApi.ts","components/CurrencyContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","InputValuta","props","FormControl","fullWidth","variant","style","width","InputLabel","htmlFor","OutlinedInput","type","id","value","inputValue","onChange","event","setInputValue","Number","currentTarget","startAdornment","InputAdornment","position","valuta","labelWidth","React","memo","RublesInput","rubles","setRubles","SelectCurrency","sortArray","map","el","rates","sort","a","b","TextField","select","label","currency","setCurrency","target","helperText","option","index","MenuItem","toFixed","ResultInput","onChangeHandler","useCallback","inputValutaValue","setInputValutaValue","setValuta","Summa","instance","axios","create","baseURL","conversionApi","get","then","res","data","CurrencyContainer","useState","setRates","useEffect","setInterval","className","classes","conversionContainer__inputBlock","conversionContainer__inputBlock__input","conversionContainer__inputBlock__span","conversionContainer__summaBlock","App","conversionContainer","conversionContainer__titleBlock","conversionContainer__titleBlock__title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.507d154d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"conversionContainer\":\"App_conversionContainer__1FzQY\",\"conversionContainer__titleBlock\":\"App_conversionContainer__titleBlock__R-VPN\",\"conversionContainer__titleBlock__title\":\"App_conversionContainer__titleBlock__title__1v0-W\",\"conversionContainer__inputBlock\":\"App_conversionContainer__inputBlock__1iqfI\",\"conversionContainer__inputBlock__input\":\"App_conversionContainer__inputBlock__input__116Qz\",\"conversionContainer__inputBlock__span\":\"App_conversionContainer__inputBlock__span__1gLMW\",\"conversionContainer__summaBlock\":\"App_conversionContainer__summaBlock__2UG26\"};","import {FormControl, InputAdornment, InputLabel, OutlinedInput} from \"@material-ui/core\"\r\nimport React, {ChangeEvent} from \"react\"\r\n\r\ntype InputValutaPropsType = {\r\n    valuta: string\r\n    inputValue: number | null\r\n    setInputValue: (inputValue: number | null)=> void\r\n\r\n\r\n}\r\n\r\nconst InputValuta = (props: InputValutaPropsType ) => {\r\n    return <FormControl fullWidth variant=\"outlined\" style={{width: \"250px\"}}>\r\n        <InputLabel htmlFor=\"outlined-adornment-amount\">Amount</InputLabel>\r\n        <OutlinedInput\r\n            type=\"number\"\r\n            id=\"outlined-adornment-amount\"\r\n            value={props.inputValue}\r\n            onChange={(event: ChangeEvent<HTMLInputElement>)=>props.setInputValue(Number(event.currentTarget.value))}\r\n            startAdornment={<InputAdornment position=\"start\">{props.valuta}</InputAdornment>}\r\n            labelWidth={60}\r\n\r\n        />\r\n    </FormControl>\r\n}\r\n\r\nexport default React.memo(InputValuta)","import React from \"react\"\r\nimport InputValuta from \"./assets/InputValuta\";\r\n\r\ntype RublesInputPropsType = {\r\n    rubles: number | null\r\n    setRubles: (rubles: number| null) => void\r\n    setInputValutaValue: (inputValutaValue: number| null) => void\r\n    inputValutaValue: number| null\r\n    rates: { [key: string]: number } | null\r\n    valuta: string\r\n}\r\n\r\nconst RublesInput = (props: RublesInputPropsType) => {\r\n\r\n\r\n    return <InputValuta\r\n        valuta={\"RUB\"}\r\n        inputValue={props.rubles}\r\n        setInputValue={props.setRubles}\r\n    />\r\n}\r\n\r\nexport default React.memo(RublesInput)","import React from \"react\"\r\nimport {MenuItem, TextField} from \"@material-ui/core\";\r\n\r\ntype SelectCurrencyPropsType = {\r\n    currency: string\r\n    setCurrency: (currency: string) => void\r\n    rates: { [key: string]: number } | null\r\n}\r\n\r\nconst SelectCurrency = (props: SelectCurrencyPropsType) => {\r\n\r\n    const currencies: { value: string, rates?: number }[] = [\r\n        {value: \"AUD\"},\r\n        {value: \"AZN\"},\r\n        {value: \"GBP\"},\r\n        {value: \"AMD\"},\r\n        {value: \"BYN\"},\r\n        {value: \"BGN\"},\r\n        {value: \"BRL\"},\r\n        {value: \"HUF\"},\r\n        {value: \"HKD\"},\r\n        {value: \"DKK\"},\r\n        {value: \"USD\"},\r\n        {value: \"EUR\"},\r\n        {value: \"INR\"},\r\n        {value: \"KZT\"},\r\n        {value: \"CAD\"},\r\n        {value: \"KGS\"},\r\n        {value: \"CNY\"},\r\n        {value: \"MDL\"},\r\n        {value: \"NOK\"},\r\n        {value: \"PLN\"},\r\n        {value: \"RON\"},\r\n        {value: \"XDR\"},\r\n        {value: \"SGD\"},\r\n        {value: \"TJS\"},\r\n        {value: \"TRY\"},\r\n        {value: \"TMT\"},\r\n        {value: \"UZS\"},\r\n        {value: \"UAH\"},\r\n        {value: \"CZK\"},\r\n        {value: \"SEK\"},\r\n        {value: \"CHF\"},\r\n        {value: \"ZAR\"},\r\n        {value: \"KRW\"},\r\n        {value: \"JPY\"},\r\n    ]\r\n    const sortArray = currencies.map((el: { value: string, rates?: number }) => {\r\n        return props.rates &&  {...el, rates: props.rates[el.value]};\r\n    })\r\n        .sort((a, b) => {\r\n             if (a && b) {\r\n                 return  a.rates - b.rates\r\n            }  else return  0\r\n        })\r\n\r\n\r\n    return <TextField\r\n        id=\"outlined-select-currency\"\r\n        select\r\n        label=\"Select\"\r\n        value={props.currency}\r\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\r\n            debugger\r\n            props.setCurrency(event.target.value)\r\n        }}\r\n        helperText=\"Please select your currency\"\r\n        variant=\"outlined\"\r\n        style={{width: \"200px\"}}\r\n    >\r\n        {sortArray.map((option, index) => (\r\n            option !== null && <MenuItem key={index} value={option.value}>\r\n        1 {option.value} -  {(1 / (option.rates || 0)).toFixed(3)} RUB\r\n            </MenuItem>\r\n        ))}\r\n    </TextField>\r\n}\r\n\r\nexport default React.memo(SelectCurrency)","import React, {useCallback} from \"react\"\r\nimport InputValuta from \"./assets/InputValuta\"\r\nimport SelectCurrency from \"./assets/SelectCurrency\"\r\n\r\ntype ResultInputPropsType = {\r\n    setInputValutaValue: (inputValutaValue: number | null) => void\r\n    inputValutaValue: number| null\r\n    setValuta: (valuta: string) => void\r\n    valuta: string\r\n    rubles: number| null\r\n    rates: { [key: string]: number } | null\r\n    setRubles: (rubles: number| null) => void\r\n}\r\n\r\nconst ResultInput = (props: ResultInputPropsType) => {\r\n\r\n    const onChangeHandler = useCallback((inputValutaValue : number | null) => {\r\n        props.rates && props.setRubles(Number(((inputValutaValue || 0) / props.rates[props.valuta]).toFixed(2)))\r\n        props.setInputValutaValue(inputValutaValue)\r\n    },[props.setRubles,props.rates, props.valuta , props.setInputValutaValue])\r\n\r\n    return <div>\r\n\r\n        <InputValuta\r\n            valuta={props.valuta}\r\n            setInputValue={onChangeHandler}\r\n            inputValue={props.inputValutaValue}\r\n\r\n        />\r\n        <SelectCurrency\r\n            currency={props.valuta}\r\n            setCurrency={props.setValuta}\r\n            rates={props.rates}\r\n        />\r\n\r\n    </div>\r\n}\r\n\r\nexport default React.memo(ResultInput)","import React from \"react\"\r\n\r\ntype SummaPropsType ={\r\n    inputValutaValue: number | null\r\n    valuta: string\r\n}\r\n\r\nconst Summa = (props: SummaPropsType) => {\r\n    return <h2>{props.inputValutaValue?props.inputValutaValue : 0}({props.valuta})</h2>\r\n}\r\n\r\nexport default React.memo(Summa)","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://www.cbr-xml-daily.ru/',\r\n});\r\n\r\nexport const conversionApi = {\r\n    getCurrentCurrency() {\r\n        return instance.get<CurrencyResponseType>('latest.js').then(res => res.data)\r\n    }\r\n}\r\n\r\ntype CurrencyResponseType = {\r\n    date: string\r\n    rates: RatesType\r\n}\r\n\r\nexport type RatesType = {\r\n    \"AUD\": number\r\n    \"AZN\": number\r\n    \"GBP\": number\r\n    \"AMD\": number\r\n    \"BYN\": number\r\n    \"BGN\": number\r\n    \"BRL\": number\r\n    \"HUF\": number\r\n    \"HKD\": number\r\n    \"DKK\": number\r\n    \"USD\": number\r\n    \"EUR\": number\r\n    \"INR\": number\r\n    \"KZT\": number\r\n    \"CAD\": number\r\n    \"KGS\": number\r\n    \"CNY\": number\r\n    \"MDL\": number\r\n    \"NOK\": number\r\n    \"PLN\": number\r\n    \"RON\": number\r\n    \"XDR\": number\r\n    \"SGD\": number\r\n    \"TJS\": number\r\n    \"TRY\": number\r\n    \"TMT\": number\r\n    \"UZS\": number\r\n    \"UAH\": number\r\n    \"CZK\": number\r\n    \"SEK\": number\r\n    \"CHF\": number\r\n    \"ZAR\": number\r\n    \"KRW\": number\r\n    \"JPY\": number\r\n}","import React, {useEffect, useState} from \"react\"\r\nimport classes from \"../App.module.css\";\r\nimport RublesInput from \"./RublesInput\";\r\nimport ResultInput from \"./ResultInput\";\r\nimport Summa from \"./Summa\";\r\nimport {conversionApi} from \"../dal/conversionApi\";\r\n\r\nconst CurrencyContainer = () => {\r\n\r\n    let [rates, setRates] = useState<{ [key: string]: number }| null>(null)\r\n\r\n\r\n    let [valuta, setValuta] = useState<string>(\"USD\")\r\n    let [rubles, setRubles] = useState<number|null>(0)\r\n    let [inputValutaValue, setInputValutaValue] = useState<number| null>(0)\r\n\r\n    inputValutaValue===0&& setInputValutaValue(null)\r\n    rubles===0&& setRubles(null)\r\n\r\n    useEffect(() => {\r\n        rates === null && conversionApi.getCurrentCurrency().then(res => setRates(res.rates))\r\n\r\n        rates === null && setInterval(() => conversionApi.getCurrentCurrency().then(res => setRates(res.rates)), 10000)\r\n\r\n        if (rates) {\r\n            setInputValutaValue(Number(((rubles || 0) * (rates[valuta])).toFixed(2)))\r\n        }\r\n\r\n\r\n    }, [valuta, rubles, rates])\r\n\r\n\r\n    return <>\r\n\r\n        <div className={classes.conversionContainer__inputBlock}>\r\n            <div className={classes.conversionContainer__inputBlock__input}>\r\n                <RublesInput\r\n                    rubles={rubles}\r\n                    setRubles={setRubles}\r\n                    inputValutaValue={inputValutaValue}\r\n                    rates={rates}\r\n                    setInputValutaValue={setInputValutaValue}\r\n                    valuta={valuta}\r\n                />\r\n            </div>\r\n            <span className={classes.conversionContainer__inputBlock__span}>⇆</span>\r\n            <div className={classes.conversionContainer__inputBlock__input}>\r\n                <ResultInput\r\n                    valuta={valuta}\r\n                    inputValutaValue={inputValutaValue}\r\n                    setInputValutaValue={setInputValutaValue}\r\n                    setValuta={setValuta}\r\n                    rubles={rubles}\r\n                    rates={rates}\r\n                    setRubles={setRubles}\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n        <div className={classes.conversionContainer__summaBlock}>\r\n            <Summa\r\n                inputValutaValue={inputValutaValue}\r\n                valuta={valuta}\r\n            />\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\nexport default React.memo(CurrencyContainer)","import React, {useEffect} from 'react';\r\nimport classes from './App.module.css';\r\nimport CurrencyContainer from \"./components/CurrencyContainer\";\r\nimport {conversionApi} from \"./dal/conversionApi\";\r\n\r\nconst App = () => {\r\n\r\n\r\n    return <div className={classes.conversionContainer}>\r\n\r\n        <div className={classes.conversionContainer__titleBlock}>\r\n            <h1 className={classes.conversionContainer__titleBlock__title}>\r\n                Currency Conversion\r\n            </h1>\r\n        </div>\r\n\r\n        <CurrencyContainer/>\r\n\r\n\r\n    </div>;\r\n}\r\n\r\nexport default React.memo(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}